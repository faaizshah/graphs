"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.string.bold");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherOptions = gatherOptions;
exports.gatherConfig = gatherConfig;
exports.gatherOptionsConfig = gatherOptionsConfig;
exports.configSchema = exports.argvSchema = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _joi = _interopRequireDefault(require("@hapi/joi"));

var _minimist = _interopRequireDefault(require("minimist"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _ramda = _interopRequireDefault(require("ramda"));

var _file = require("./util/file");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var minimistOpts = {
  "boolean": ['d', 'g', 'h', 'p', 'v'],
  string: ['c', 'm', 'r'],
  alias: {
    c: 'config',
    d: 'dryrun',
    g: 'gen-ln-cmds',
    h: 'help',
    m: 'memory',
    p: 'prune',
    r: 'refs-file',
    t: 'tree-depth',
    v: 'verbose'
  }
};

var argvSchema = _joi["default"].object({
  config: _joi["default"].string(),
  'refs-file': _joi["default"].string(),
  'tree-depth': _joi["default"].number().integer().min(0)
}).unknown(true);

exports.argvSchema = argvSchema;

var configSchema = _joi["default"].object({
  refsFile: _joi["default"].string()["default"](_path["default"].resolve(_os["default"].homedir(), _constants.DEFAULT_REFS_FILE)),
  concurrentOps: _joi["default"].number().integer().min(1)["default"](4),
  // windows does not maintain original modtimes for installs
  // so ignoreModTime is defaulted to true for win32
  ignoreModTime: _joi["default"]["boolean"]()["default"](_os["default"].platform() === 'win32'),
  memory: _joi["default"].number().integer().min(100)["default"](2560),
  // MB
  minFileSize: _joi["default"].number().integer().min(0)["default"](0),
  // bytes
  treeDepth: _joi["default"].number().integer().min(0)["default"](0),
  refSize: _joi["default"].number().integer().min(1)["default"](5),
  consoleWidth: _joi["default"].number().integer().min(30)["default"](70)
});

exports.configSchema = configSchema;

function gatherOptions(processArgv, displayHelp) {
  // processArgv is already sliced, process.argv.slice(2)
  var unvalidArgv = (0, _minimist["default"])(processArgv, minimistOpts);
  var argvVResult = argvSchema.validate(unvalidArgv);

  if (argvVResult.error) {
    if (displayHelp) {
      displayHelp();
    }

    console.error('');
    console.error(_chalk["default"].red('error: invalid argument specified'));
    argvVResult.error.details.forEach(function (err) {
      console.error(err.message);
    });
    process.exit(20);
  }

  var argv = argvVResult.value; // possibly updated by schema

  return argv;
}

function gatherConfig(argv, unvalidatedConfig, configPath) {
  var configResult = configSchema.validate(unvalidatedConfig, {
    abortEarly: false
  });

  if (configResult.error) {
    console.error(_chalk["default"].red('error: invalid JSON configuration'));
    console.error("".concat(_chalk["default"].bold('config file:'), " ").concat(configPath));
    configResult.error.details.forEach(function (err) {
      console.error(err.message);
    });
    process.exit(22);
  }

  var config = configResult.value; // with defaults applied

  _ramda["default"].toPairs({
    // for these defined argv values override config
    dryrun: argv.dryrun,
    genLnCmds: argv['gen-ln-cmds'],
    memory: argv.memory,
    refsFile: argv['refs-file'],
    treeDepth: argv['tree-depth']
  }).forEach(function (p) {
    var k = p[0];
    var v = p[1];

    if (!_ramda["default"].isNil(v)) {
      // if defined, use it
      config[k] = v;
    }
  }); // define how much room is left for displaying paths


  config.extraCols = config.consoleWidth - 30;
  return config;
}

function gatherOptionsConfig(processArgv, displayHelp) {
  var argv = gatherOptions(processArgv, displayHelp);

  var CONFIG_PATH = argv.config || _path["default"].resolve(_os["default"].homedir(), _constants.DEFAULT_CONFIG_FILE);

  var parsedConfigJson = (0, _file.safeJsonReadSync)(CONFIG_PATH);

  if (parsedConfigJson instanceof Error) {
    console.error(_chalk["default"].red('error: invalid JSON configuration'));
    console.error("".concat(_chalk["default"].bold('config file:'), " ").concat(CONFIG_PATH));
    console.error(parsedConfigJson); // error

    process.exit(21);
  }

  var unvalidatedConfig = parsedConfigJson || {};
  var config = gatherConfig(argv, unvalidatedConfig, CONFIG_PATH);
  return {
    argv: argv,
    config: config
  };
}