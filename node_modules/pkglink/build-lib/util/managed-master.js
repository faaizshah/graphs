"use strict";

require("core-js/modules/web.timers");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = runAsMaster;

var _cluster = _interopRequireDefault(require("cluster"));

var _readline = _interopRequireDefault(require("readline"));

var _ramda = _interopRequireDefault(require("ramda"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// child process is killed if doesn't shutdown in this time
var STOP_TIMEOUT = 10000; // 10s

function runAsMaster(INTERRUPT_TYPE) {
  var win32 = process.platform === 'win32';
  var readline;

  if (win32) {
    readline = _readline["default"].createInterface({
      input: process.stdin,
      output: process.stdout
    });
    readline.on('SIGINT', function () {
      process.emit('SIGINT');
    });
  }

  var shutdown = _ramda["default"].once(function () {
    if (readline) {
      readline.close();
    }
  });

  function launchChildWorker(script, opts) {
    var options = _ramda["default"].merge({
      exec: script,
      stopTimeout: STOP_TIMEOUT
    }, opts);

    _cluster["default"].setupMaster(options);

    var worker = _cluster["default"].fork();

    var killTimeout = null;

    var cancel = _ramda["default"].once(function () {
      // for windows compatibility
      worker.send({
        type: INTERRUPT_TYPE
      }); // failsafe timer, kills child if doesn't shutdown

      killTimeout = setTimeout(function () {
        console.log('killing child');
        worker.kill('SIGTERM');
        killTimeout = null;
      }, options.stopTimeout);
    });

    process.once('SIGINT', cancel).once('SIGTERM', cancel);
    worker.on('exit', function (code) {
      process.exitCode = code;

      if (killTimeout) {
        try {
          clearTimeout(killTimeout);
          killTimeout = null;
        } catch (err) {
          console.error(err);
        }
      }

      shutdown();
    });
    return worker;
  }

  function onInterrupt(fn) {
    process.once('SIGINT', fn);
  }

  return {
    launchChildWorker: launchChildWorker,
    onInterrupt: onInterrupt,
    shutdown: shutdown
  };
}