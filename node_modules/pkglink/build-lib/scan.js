"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.bold");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = scanAndLink;

var _chalk = _interopRequireDefault(require("chalk"));

var _log = require("./util/log");

var _link = require("./link");

var _packRef = require("./pack-ref");

var _findPackages = _interopRequireDefault(require("./find-packages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function scanAndLink(config, rtenv, rootDirs) {
  var logUpdate = (0, _log.createLogUpdate)(config, rtenv);
  var outputSrcDstForDryrun = config.dryrun ? function (lnkSrcDst) {
    var dnv = lnkSrcDst.devNameVer,
        src = lnkSrcDst.src,
        dst = lnkSrcDst.dst;
    rtenv.log.clear();
    rtenv.out(_chalk["default"].bold(dnv.split(':')[0])); // nameVersion

    rtenv.out("  ".concat(src));
    rtenv.out("  ".concat(dst));
    rtenv.out('');
  } : function () {};
  return (0, _findPackages["default"])(config, rtenv, rootDirs, logUpdate).takeWhile(function () {
    return !rtenv.cancelled;
  }).mergeMap(function (eiDN) {
    return (0, _packRef.determinePackLinkSrcDst)(config, rtenv, eiDN);
  }, config.concurrentOps).takeWhile(function () {
    return !rtenv.cancelled;
  })["do"](function (lnkSrcDst) {
    return outputSrcDstForDryrun(lnkSrcDst);
  })["do"](function (lnkSrcDst) {
    rtenv.currentPackageDir = lnkSrcDst.dst;
    logUpdate();
  }).mergeMap(function (lnkSrcDst) {
    if (config.dryrun) {
      return (0, _link.determineLinks)(config, rtenv, lnkSrcDst, false);
    } else if (config.genLnCmds) {
      return (0, _link.genModuleLinks)(config, rtenv, lnkSrcDst);
    }

    return (0, _link.handleModuleLinking)(config, rtenv, lnkSrcDst);
  }, config.concurrentOps).scan(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        src = _ref2[0],
        dst = _ref2[1],
        size = _ref2[2];

    acc += size;
    return acc;
  }, 0)["do"](function (savedBytes) {
    rtenv.savedByteCount = savedBytes;
  })["do"](function (savedBytes) {
    return logUpdate();
  });
}