#!/usr/bin/env node
"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.string.bold");

require("core-js/modules/web.dom-collections.for-each");

var _chalk = _interopRequireDefault(require("chalk"));

var _fsExtraPromise = _interopRequireDefault(require("fs-extra-promise"));

var _numeral = _interopRequireDefault(require("numeral"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _ramda = _interopRequireDefault(require("ramda"));

var _rxjs = require("rxjs");

var _singleLineLog = _interopRequireDefault(require("single-line-log"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _format = require("./util/format");

var _file = require("./util/file");

var _runEnvDefaults = _interopRequireDefault(require("./run-env-defaults"));

var _index = require("./index");

var _managed = _interopRequireDefault(require("./util/managed"));

var _cliOptions = require("./cli-options");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isTTY = process.stdout.isTTY; // truthy if in terminal

var singleLineLog = _singleLineLog["default"].stderr;

var rtenv = _objectSpread({}, _runEnvDefaults["default"]);

var _gatherOptionsConfig = (0, _cliOptions.gatherOptionsConfig)(process.argv.slice(2), displayHelp),
    argv = _gatherOptionsConfig.argv,
    config = _gatherOptionsConfig.config; // should we be using terminal output


var isTermOut = isTTY && !argv['gen-ln-cmds'];

if (argv.help || !argv._.length && !argv.prune) {
  // display help
  displayHelp();
  process.exit(23);
}

function displayHelp() {
  (0, _file.outputFileStderrSync)(_path["default"].join(__dirname, '..', 'usage.txt'));
}

_fsExtraPromise["default"].ensureFileSync(config.refsFile);

var startingDirs = argv._.map(function (x) {
  return _path["default"].resolve(x);
}); // key=nameVersion value: array of ref tuples [modPath, packJsonInode, packJsonMTimeEpoch]


rtenv.existingPackRefs = _fsExtraPromise["default"].readJsonSync(config.refsFile, {
  "throws": false
}) || {};
rtenv.cancelled$ = new _rxjs.ReplaySubject(1);
var singleLineLog$ = new _rxjs.Subject();
singleLineLog$.filter(function (x) {
  return isTermOut;
}) // only if in terminal
.distinctUntilChanged().throttleTime(100).takeUntil(rtenv.cancelled$).subscribe({
  next: function next(x) {
    return singleLineLog(x);
  },
  complete: function complete() {
    singleLineLog('');
    singleLineLog.clear();
  }
});
var log = singleLineLog$.next.bind(singleLineLog$);

log.clear = function () {
  if (isTermOut) {
    singleLineLog('');
    singleLineLog.clear();
  }
};

rtenv.log = log; // share this logger in the rtenv

function out(str) {
  var s = isTermOut ? str : (0, _stripAnsi["default"])(str);
  process.stdout.write(s);
  process.stdout.write(_os["default"].EOL);
}

rtenv.out = out; // share this output fn in the rtenv

var cancel = _ramda["default"].once(function () {
  rtenv.cancelled = true;
  rtenv.cancelled$.next(true);
  console.error('cancelling...');
});

var finalTasks = _ramda["default"].once(function () {
  singleLineLog$.complete();

  if (argv.dryrun || argv['gen-ln-cmds']) {
    out("# ".concat(_chalk["default"].blue('pkgs:'), " ").concat((0, _numeral["default"])(rtenv.packageCount).format('0,0'), " ").concat(_chalk["default"].yellow('would save:'), " ").concat(_chalk["default"].bold((0, _format.formatBytes)(rtenv.savedByteCount))));

    _managed["default"].shutdown();

    return;
  }

  if (argv.prune || Object.keys(rtenv.updatedPackRefs).length) {
    var sortedExistingPackRefs = (0, _format.sortObjKeys)(_ramda["default"].merge(rtenv.existingPackRefs, rtenv.updatedPackRefs));

    _fsExtraPromise["default"].outputJsonSync(config.refsFile, sortedExistingPackRefs); // if pruned or if no savings, at least let them know refs updated


    if (argv.prune || !rtenv.savedByteCount) {
      out("updated ".concat(config.refsFile));
    }
  }

  out("".concat(_chalk["default"].blue('pkgs:'), " ").concat((0, _numeral["default"])(rtenv.packageCount).format('0,0'), " ").concat(_chalk["default"].green('saved:'), " ").concat(_chalk["default"].bold((0, _format.formatBytes)(rtenv.savedByteCount))));

  _managed["default"].shutdown();
});

_managed["default"].onInterrupt(cancel); // fires on SIGINT


process.once('SIGTERM', cancel).once('EXIT', finalTasks);

if (argv.verbose) {
  console.log('argv', argv);
  console.log('config', config);
}

out(''); // advance to full line
// Main program start, create task$ and run

var arrTaskObs = [];

if (argv.prune) {
  arrTaskObs.push(_rxjs.Observable.defer(function () {
    log("".concat(_chalk["default"].bold('pruning...')));
    return (0, _index.prune)(config, rtenv.existingPackRefs);
  })["do"](function (newShares) {
    rtenv.existingPackRefs = newShares;
  }));
}

if (startingDirs.length) {
  arrTaskObs.push(_rxjs.Observable.defer(function () {
    return (0, _index.scanAndLink)(config, rtenv, startingDirs);
  }));
} // run all the task observables serially


if (arrTaskObs.length) {
  _rxjs.Observable.concat.apply(_rxjs.Observable, arrTaskObs).subscribe({
    error: function error(err) {
      return console.error(err);
    },
    complete: function complete() {
      return finalTasks();
    }
  });
}